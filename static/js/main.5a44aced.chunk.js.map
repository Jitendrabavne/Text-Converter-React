{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","home","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","backgroundColor","onChange","event","console","log","document","getElementById","select","target","rows","showAlert","newText","split","join","copyText","setSelectionRange","navigator","clipboard","writeText","toUpperCase","toLowerCase","length","defaultProps","aboutText","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","massage","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5a44aced.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\nexport default function Navbar(props){\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n               {props.home}\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link> */}\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              Search\r\n            </button> */}\r\n          {/* </form> */}\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input  mx-10 \"  onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label    \" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n</div>  \r\n                  </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = { title: PropTypes.string.isRequired,\r\n     aboutText: PropTypes.string.isRequired };\r\n\r\nNavbar.defaultProps={\r\n    title:'Set Default Props',\r\n    aboutText:'  About '\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleClearClick = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\" The Text Has Been Cleared!\", \"success\");\r\n  };\r\n  const handleSpacesClick = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra Spaces  Has Been Removed!\", \"success\");\r\n  };\r\n  const handleCopyClick = () => {\r\n    let copyText = document.getElementById(\"myBox\");\r\n    copyText.select();\r\n    copyText.setSelectionRange(0, 99999);\r\n    navigator.clipboard.writeText(copyText.value);\r\n    props.showAlert(\"The Text Has Been Copied!\", \"success\");\r\n  };\r\n  const handleUpperClick = () => {\r\n    console.log(\"Text Was Changed in to Upper Case\" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Text Has Been Converted in to Upper Case!\", \"success\");\r\n  };\r\n  const handleLowClick = () => {\r\n    console.log(\"Text Was Changed in to Upper Case\" + text);\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n\r\n    props.showAlert(\"Text Has Been Converted in to Lower Case!\", \"success\");\r\n  };\r\n  const handleOnChange = (event) => {\r\n    console.log(\"handle is Changed\");\r\n    let selectText = document.getElementById(\"myBox\");\r\n\r\n    selectText.select();\r\n\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const [text, setText] = useState(\" \");\r\n  // text=\"Enter New Text\"--thats wrong way to change state\r\n  // setText(\"New Text\");// --thats correct way to change state\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h1>{props.heading} </h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"#042743\",\r\n            }}\r\n            onChange={handleOnChange}\r\n            id=\"myBox\"\r\n            rows=\"9\"\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>\r\n          Clear Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleSpacesClick}>\r\n          Remove Spaces\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleCopyClick}>\r\n          Copy Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleUpperClick}>\r\n          Convert To Uppercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleLowClick}>\r\n          Convert To Lowercase\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h2> Text Summary</h2>\r\n        <p>\r\n          {text.split(\" \").length} words and{\" \"}\r\n          {text.length === \" \" ? text.length[0] : text.length} charactors\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n\r\n        <h3> Preview </h3>\r\n        <p>\r\n          {text.length > 0\r\n            ? text\r\n            : \"Enter Something  in The Textbox Above To Preview it Here\"}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n    return (\r\n       props.alert && <div> \r\n           {/* //if props.alert is null then we get the val below whenever its not null then we get props.alert */}\r\n            <div className={`alert alert-${ props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n <strong> {capitalize(props.alert.type)}  </strong> :{props.alert.msg}  \r\n</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n"," \nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm'; \n// import React  from 'react';  \nimport React, { useState } from 'react';\nimport Alert from './components/Alert'; \n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route  \n// } from \"react-router-dom\";\n\n \n \nfunction App() { \n  const [mode, setMode] = useState('light')\n  const [alert, setAlert] = useState(null)\n   \n   const  showAlert=(massage,type)=>{\n    setAlert(\n      { msg:massage,    //object\n        type:type\n    }\n    )\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n    }\n  \n  const toggleMode=()=>{\n    if(mode=== 'light'){\n    setMode('dark');\n    document.body.style.backgroundColor=\"#042743\";\n    showAlert(\"Dark Mode Has Been Enabled\",\"success\")\n    document.title=\"Text Converter-Dark Mode\"\n    // setInterval(() => {\n    //   document.title=\"Text Converter Is Amazing\"\n      \n    // }, 2000);\n    // setInterval(() => {\n    //   document.title=\"Install Now Text Converter Is Amazing\"\n      \n    // }, 1500);\n  }\n  else{\n    setMode('light');\n    document.body.style.backgroundColor=\"white\";\n    showAlert(\"Light Mode Has Been Enabled\",\"success\")\n    // setInterval(() => {\n    //   document.title=\"Text Converter Is Amezing\"\n      \n    // }, 2000);\n    // setInterval(() => {\n    //   document.title=\"Install Now Text Converter Is Amezing\"\n      \n    // }, 1500);\n  }\n  }\n  return (\n    <>\n{/* <Navbar title='Text Converter' aboutText='About Us'/> */}\n{/* <Router> */}\n<Navbar title='Text Converter' home=\" Home\" mode={mode} toggleMode={toggleMode}  />\n<Alert alert={alert}/>\n<div className=\"container my-3\">\n      {/* <Switch> */}\n          {/* <Route exact path=\"/about\">\n            <About/> */}\n           {/* </Route> */}\n          {/* <Route exact path=\"/\"> */}\n<TextForm showAlert={showAlert} heading=\"Enter The Text To Analyze\" mode={mode}/> \n          {/* </Route> */}\n        {/* </Switch>  */}\n</div>\n{/* </Router>  */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}